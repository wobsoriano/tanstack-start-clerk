diff --git a/dist/server/middlewareHandler.js b/dist/server/middlewareHandler.js
index 398aeeaa862b6b019d124b29ffa5c776069381ed..d756428139a46f4c72f28aec730f2c07074f6748 100644
--- a/dist/server/middlewareHandler.js
+++ b/dist/server/middlewareHandler.js
@@ -1,13 +1,19 @@
 import { authenticateRequest } from './authenticateRequest.js';
 import { loadOptions } from './loadOptions.js';
 import { getResponseClerkState } from './utils/index.js';
+import { getContext } from 'vinxi/http';
 
 // src/server/middlewareHandler.ts
 function createClerkHandler(eventHandler, clerkOptions = {}) {
   return (cb) => {
     return eventHandler(async ({ request, router, responseHeaders }) => {
       try {
-        const loadedOptions = loadOptions(request, clerkOptions);
+        const cloudflareCtx = getContext('cloudflare');
+        const loadedOptions = loadOptions(request, {
+          ...clerkOptions,
+          secretKey: cloudflareCtx?.env?.CLERK_SECRET_KEY ?? clerkOptions.secretKey,
+          publishableKey: cloudflareCtx?.env?.CLERK_PUBLISHABLE_KEY ?? clerkOptions.publishableKey,
+        });
         const requestState = await authenticateRequest(request, loadedOptions);
         const clerkInitialState = getResponseClerkState(requestState, loadedOptions);
         router.update({
diff --git a/dist/utils/env.js b/dist/utils/env.js
index 0115d016bd8db934225941899d127028ff87f1bc..bbfa07c5fdf5844b81f112bdc2546629d5770fa6 100644
--- a/dist/utils/env.js
+++ b/dist/utils/env.js
@@ -1,4 +1,5 @@
 import { isTruthy } from '@clerk/shared/underscore';
+// import { getContext } from 'vinxi/http';
 
 // src/utils/env.ts
 var getEnvVariable = (name, defaultVaue = "") => {
@@ -8,6 +9,10 @@ var getEnvVariable = (name, defaultVaue = "") => {
   if (typeof import.meta !== "undefined" && import.meta.env && typeof import.meta.env[name] === "string") {
     return import.meta.env[name];
   }
+  // This will not work here as getContext need access to event object via AsyncLocalStorage.
+  // if (getContext('cloudflare')) {
+  //   return getContext('cloudflare').env[name]
+  // }
   return defaultVaue;
 };
 var getPublicEnvVariables = () => {
